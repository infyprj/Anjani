import { Component, OnInit } from '@angular/core';
import { IProduct } from '../interfaces/product';
import { ProductService } from '../services/product-service/product.service';
import { AuthService } from '../services/auth-service/auth.service';
import { Router } from '@angular/router';
import { CartService } from '../services/cart-service/cart.service';
import { ICartItem } from '../interfaces/cart';

@Component({
  selector: 'app-view-wishlist',
  templateUrl: './view-wishlist.component.html',
  styleUrls: ['./view-wishlist.component.css']
})
export class ViewWishlistComponent implements OnInit {
  savedProducts: IProduct[] = [];
  isLoading: boolean = false;
  errorMessage: string = "";
  currentUserId: number = 0;

  constructor(
    private _productService: ProductService,
    private authService: AuthService,
    private router: Router,
    private _cartService: CartService
  ) {}

  ngOnInit(): void {
    this.currentUserId = this.authService.getCurrentUserId(); // assuming you have this method
    this.loadSavedProducts();
  }

  loadSavedProducts(): void {
    this.isLoading = true;
    this._productService.getSavedProducts(this.currentUserId).subscribe(
      response => {
        this.savedProducts = response;
        this.isLoading = false;
      },
      error => {
        this.errorMessage = "Failed to load saved products.";
        this.isLoading = false;
        console.error(error);
      }
    );
  }

  removeFromWishlist(productId: number): void {
    this._productService.removeSavedProduct(this.currentUserId, productId).subscribe(
      () => {
        this.savedProducts = this.savedProducts.filter(p => p.productId !== productId);
      },
      error => {
        console.error("Error removing from wishlist", error);
      }
    );
  }

  addToCart(product: IProduct): void {
    const cartItem: ICartItem = {
      productId: product.productId,
      quantity: 1,
      userId: this.currentUserId
    };
    this._cartService.addProductToCart(cartItem);
  }

  viewProductDetails(productId: number): void {
    this.router.navigate(['/product', productId]);
  }

  isInWishlist(productId: number): boolean {
    return this.savedProducts.some(p => p.productId === productId);
  }

  toggleWishlist(product: IProduct): void {
    if (this.isInWishlist(product.productId)) {
      this.removeFromWishlist(product.productId);
    } else {
      this._productService.addSavedProduct(this.currentUserId, product.productId).subscribe(() => {
        this.savedProducts.push(product);
      });
    }
  }
}


wishlist.component.html

<div class="container my-4">
  <h2 class="mb-4">Your Wishlist</h2>

  <!-- Loading -->
  <div *ngIf="isLoading" class="text-center">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p>Loading your wishlist items...</p>
  </div>

  <!-- Error -->
  <div *ngIf="errorMessage" class="alert alert-danger">
    {{ errorMessage }}
  </div>

  <!-- Empty Wishlist -->
  <div *ngIf="!isLoading && savedProducts.length === 0" class="text-center mt-5">
    <div class="alert alert-info w-50 mx-auto">
      Your wishlist is empty. Start saving your favorite products!
    </div>
  </div>

  <!-- Wishlist Items -->
  <div class="row" *ngIf="!isLoading && savedProducts.length > 0">
    <div class="col-md-6 mb-4" *ngFor="let product of savedProducts">
      <div class="card h-100 shadow-sm p-3" style="border-radius: 10px;">
        <div class="row g-0">
          <!-- Image -->
          <div class="col-md-4">
            <img [src]="product.thumbnailUrl"
                 class="img-fluid rounded-start"
                 alt="{{ product.name }}"
                 style="height: 180px; width: 100%; object-fit: cover; cursor: pointer;"
                 (click)="viewProductDetails(product.productId)">
          </div>

          <!-- Details -->
          <div class="col-md-8">
            <div class="card-body h-100 d-flex flex-column justify-content-between">
              <div>
                <h5 class="card-title mb-2" style="cursor: pointer;"
                    (click)="viewProductDetails(product.productId)">
                  {{ product.name }}
                </h5>
                <p class="fw-bold text-success mb-4">â‚¹{{ product.price }}</p>
              </div>

              <!-- Buttons -->
              <div class="mt-3 d-flex justify-content-between align-items-center">
                <button class="btn btn-primary btn-sm"
                        (click)="addToCart(product)">
                  Add to Cart
                </button>

                <button class="btn btn-outline-danger btn-sm"
                        (click)="removeFromWishlist(product.productId)">
                  Remove
                </button>

                <!-- Heart Icon -->
                <i [ngClass]="{
                    'bi': true,
                    'bi-heart-fill text-danger': isInWishlist(product.productId),
                    'bi-heart': !isInWishlist(product.productId)
                  }"
                   class="fs-5"
                   style="cursor: pointer;"
                   (click)="toggleWishlist(product)">
                </i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


"node_modules/bootstrap/dist/css/bootstrap.min.css",
"node_modules/bootstrap-icons/font/bootstrap-icons.css"

npm install bootstrap bootstrap-icons

import { Component, OnInit } from '@angular/core';
import { ProductService } from '../services/product-service/product.service';
import { IProduct } from '../interfaces/product';
import { AuthService } from '../services/auth-service/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-product-search',
  templateUrl: './product-search.component.html',
  styleUrls: ['./product-search.component.css']
})
export class ProductSearchComponent implements OnInit {
  products: IProduct[] = [];
  filteredProducts: IProduct[] = [];

  categories = [
    { id: 1, name: 'Sofa' },
    { id: 2, name: 'Table' },
    { id: 3, name: 'Bed' },
    { id: 4, name: 'Chair' }
  ];

  priceRanges = [
    { label: 'Under ₹5000', min: 0, max: 5000 },
    { label: '₹5000 - ₹10000', min: 5000, max: 10000 },
    { label: '₹10000 - ₹20000', min: 10000, max: 20000 },
    { label: 'Above ₹20000', min: 20000, max: 999999 }
  ];

  selectedCategoryIds: number[] = [];
  selectedPriceRanges: { min: number; max: number }[] = [];
  searchTerm: string = '';
  isAdmin: boolean = false;
  showMsgDiv: boolean = false;
  showFiltersDropdown: boolean = false;

  constructor(
    private _productService: ProductService,
    private authService: AuthService,
    private router: Router
  ) {}

  ngOnInit() {
    this.isAdmin = this.authService.getUserRole() === 3;
    this.fetchProducts();
  }

  fetchProducts() {
    this._productService.getProducts().subscribe(
      response => {
        this.products = response;
        this.filteredProducts = response;
        this.showMsgDiv = false;
        this.applyFilters();
      },
      error => {
        this.products = [];
        console.log(error);
      }
    );
  }

  toggleFilterDropdown() {
    this.showFiltersDropdown = !this.showFiltersDropdown;
  }

  applyFilters() {
    const term = this.searchTerm.toLowerCase();

    this.filteredProducts = this.products.filter(product => {
      const matchesSearch = term === '' || product.name.toLowerCase().includes(term);

      const matchesCategory =
        this.selectedCategoryIds.length === 0 ||
        this.selectedCategoryIds.includes(product.categoryId);

      const matchesPrice =
        this.selectedPriceRanges.length === 0 ||
        this.selectedPriceRanges.some(range => product.price >= range.min && product.price <= range.max);

      return matchesSearch && matchesCategory && matchesPrice;
    });

    this.showMsgDiv = this.filteredProducts.length === 0;
  }

  onSearch() {
    this.applyFilters();
  }

  onCategoryToggle(id: number) {
    const index = this.selectedCategoryIds.indexOf(id);
    if (index > -1) {
      this.selectedCategoryIds.splice(index, 1);
    } else {
      this.selectedCategoryIds.push(id);
    }
    this.applyFilters();
  }

  onPriceRangeToggle(range: { min: number; max: number }) {
    const index = this.selectedPriceRanges.findIndex(r => r.min === range.min && r.max === range.max);
    if (index > -1) {
      this.selectedPriceRanges.splice(index, 1);
    } else {
      this.selectedPriceRanges.push(range);
    }
    this.applyFilters();
  }

  clearFilters() {
    this.selectedCategoryIds = [];
    this.selectedPriceRanges = [];
    this.searchTerm = '';
    this.filteredProducts = this.products;
    this.showFiltersDropdown = false;
    this.applyFilters();
  }

  updateProduct(product: IProduct) {
    this.router.navigate(['/update-product', product.productId, product.name, product.description,
      product.price, product.categoryId, product.modelUrl, product.thumbnailUrl, product.quantity]);
  }

  deleteProduct(productId: number) {
    if (confirm('Are you sure you want to delete this product?')) {
      this._productService.deleteProduct(productId).subscribe(
        response => {
          if (response) {
            this.ngOnInit();
          } else {
            console.log("Could not delete");
          }
        },
        error => {
          console.log("Some error occurred: " + error);
        }
      );
    }
  }

  viewProductDetails(productId: number): void {
    this.router.navigate(['/product', productId]);
  }
}
-----
<app-navbar></app-navbar>

<!-- FILTER SECTION -->
<div class="container my-4">
  <div class="row justify-content-center align-items-center">
    <!-- FILTERS BUTTON -->
    <div class="col-md-3 position-relative">
      <button class="btn btn-outline-primary w-100" (click)="toggleFilterDropdown()">
        Filters
      </button>
      <div class="card p-3 position-absolute bg-white border shadow" *ngIf="showFiltersDropdown" style="z-index: 10; width: 100%;">
        <strong>Categories</strong>
        <div *ngFor="let category of categories">
          <label>
            <input type="checkbox" [checked]="selectedCategoryIds.includes(category.id)" (change)="onCategoryToggle(category.id)" />
            {{ category.name }}
          </label>
        </div>
        <hr />
        <strong>Price Ranges</strong>
        <div *ngFor="let range of priceRanges">
          <label>
            <input type="checkbox" [checked]="selectedPriceRanges.some(r => r.min === range.min && r.max === range.max)"
                   (change)="onPriceRangeToggle(range)" />
            {{ range.label }}
          </label>
        </div>
        <hr />
        <button class="btn btn-sm btn-secondary w-100" (click)="clearFilters()">Clear Filters</button>
      </div>
    </div>

    <!-- SEARCH BAR -->
    <div class="col-md-6">
      <input type="text"
             [(ngModel)]="searchTerm"
             (input)="onSearch()"
             placeholder="Search products..."
             class="form-control" />
    </div>
  </div>
</div>

<!-- NO PRODUCTS MESSAGE -->
<div *ngIf="filteredProducts.length === 0" class="text-center mt-5">
  <div class="alert alert-warning w-50 mx-auto">
    No products available.
  </div>
</div>

<!-- PRODUCTS LISTING -->
<div class="container mt-4">
  <div class="row">
    <div class="col-md-4 mb-4" *ngFor="let product of filteredProducts">
      <div class="card h-100 shadow-sm">
        <img [src]="product.thumbnailUrl"
             class="card-img-top"
             alt="{{ product.name }}"
             style="height: 250px; object-fit: cover; cursor: pointer;"
             (click)="viewProductDetails(product.productId)" />
        <div class="card-body">
          <h5 class="card-title"
              style="cursor: pointer;"
              (click)="viewProductDetails(product.productId)">
            {{ product.name }}
          </h5>
          <p class="fw-bold text-success">₹{{ product.price }}</p>
          <div *ngIf="isAdmin">
            <button class="btn btn-sm btn-primary me-2" (click)="updateProduct(product)">Update</button>
            <button class="btn btn-sm btn-danger" (click)="deleteProduct(product.productId)">Delete</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

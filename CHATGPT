<div class="filters mb-4">
  <input type="text" [(ngModel)]="searchTerm" placeholder="Search products..." (input)="onSearch()" class="form-control d-inline-block w-25 me-2" />

  <select class="form-select d-inline-block w-25 me-2" [(ngModel)]="selectedCategoryId" (change)="onCategoryChange()">
    <option *ngFor="let category of categories" [value]="category.id">{{ category.name }}</option>
  </select>

  <select class="form-select d-inline-block w-25" [(ngModel)]="selectedPriceRange" (change)="onPriceChange()">
    <option *ngFor="let range of priceRanges" [ngValue]="range">{{ range.label }}</option>
  </select>
</div>

<div *ngIf="products.length === 0" class="alert alert-warning">
  No products available.
</div>

<div class="row">
  <div class="col-md-4 mb-4" *ngFor="let product of products">
    <div class="card h-100">
      <img [src]="product.thumbnailUrl" class="card-img-top" alt="{{ product.name }}">
      <div class="card-body">
        <h5 class="card-title">{{ product.name }}</h5>
        <p class="card-text">{{ product.description }}</p>
        <p class="fw-bold text-success">₹{{ product.price }}</p>
        <button *ngIf="isAdmin" class="btn btn-sm btn-primary me-2" (click)="updateProduct(product.productId)">Update</button>
        <button *ngIf="isAdmin" class="btn btn-sm btn-danger" (click)="deleteProduct(product.productId)">Delete</button>
      </div>
    </div>
  </div>
</div>

add these changes to this html code and modify as, so that i get search bar in mddle of the homepage and filtering categories to the left of search bar and price range dropdown list to right of search bar
and also display products.
if i search any product in searchbar,if that product is available in database then it has to be dislayed else it has to display no products available.
generate a effective html code for this requirement.

----_---

<!-- FILTER SECTION -->
<div class="container my-4">
  <div class="row justify-content-center align-items-center">
    <!-- Category Dropdown -->
    <div class="col-md-3">
      <select class="form-select" [(ngModel)]="selectedCategoryId" (change)="onCategoryChange()">
        <option *ngFor="let category of categories" [value]="category.id">{{ category.name }}</option>
      </select>
    </div>

    <!-- Search Bar -->
    <div class="col-md-6">
      <input
        type="text"
        [(ngModel)]="searchTerm"
        placeholder="Search products..."
        (input)="onSearch()"
        class="form-control"
      />
    </div>

    <!-- Price Dropdown -->
    <div class="col-md-3 mt-3 mt-md-0">
      <select class="form-select" [(ngModel)]="selectedPriceRange" (change)="onPriceChange()">
        <option *ngFor="let range of priceRanges" [ngValue]="range">{{ range.label }}</option>
      </select>
    </div>
  </div>
</div>

<!-- NO PRODUCTS MESSAGE -->
<div *ngIf="products.length === 0" class="text-center mt-5">
  <div class="alert alert-warning w-50 mx-auto">
    No products available.
  </div>
</div>

<!-- PRODUCTS LISTING -->
<div class="container mt-4">
  <div class="row">
    <div class="col-md-4 mb-4" *ngFor="let product of products">
      <div class="card h-100 shadow-sm">
        <img [src]="product.thumbnailUrl" class="card-img-top" alt="{{ product.name }}" style="height: 250px; object-fit: cover;" />
        <div class="card-body">
          <h5 class="card-title">{{ product.name }}</h5>
          <p class="card-text">{{ product.description }}</p>
          <p class="fw-bold text-success">₹{{ product.price }}</p>
          <div *ngIf="isAdmin">
            <button class="btn btn-sm btn-primary me-2" (click)="updateProduct(product.productId)">Update</button>
            <button class="btn btn-sm btn-danger" (click)="deleteProduct(product.productId)">Delete</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

------

import { Component, OnInit } from '@angular/core';
import { ProductService } from '../services/product-service/product.service';
import { IProduct } from '../interfaces/product';
import { AuthService } from '../services/auth-service/auth.service'; // Assuming auth service is implemented

@Component({
  selector: 'app-product-search',
  templateUrl: './product-search.component.html',
  styleUrls: ['./product-search.component.css']
})

export class ProductSearchComponent implements OnInit {
  products: IProduct[] = [];
  categories = [
    { id: 0, name: 'All Categories' },
    { id: 1, name: 'Sofa' },
    { id: 2, name: 'Table' },
    { id: 3, name: 'Bed' },
    { id: 4, name: 'Chair' }
  ];
  priceRanges = [
    { label: 'All Prices', min: 0, max: 999999 },
    { label: 'Under ₹5000', min: 0, max: 5000 },
    { label: '₹5000 - ₹10000', min: 5000, max: 10000 },
    { label: '₹10000 - ₹20000', min: 10000, max: 20000 },
    { label: 'Above ₹20000', min: 20000, max: 999999 }
  ];

  selectedCategoryId: number = 0;
  selectedPriceRange = this.priceRanges[0];
  searchTerm: string = '';
  isAdmin: boolean = false;

  constructor(private _productService: ProductService, private authService: AuthService) { }

  ngOnInit() {
    this.isAdmin = this.authService.getUserRole() === 'Admin';
    //this.fetchProducts();
    this.fetchSearchProducts();
    
  }



  fetchSearchProducts() {
    if (this.searchTerm) {
      this._productService.getSearchProducts(this.searchTerm).subscribe(p => this.filterLocally(p));
    } else if (this.selectedCategoryId && this.selectedCategoryId !== 0) {
      this._productService.getProductsByCategory(this.selectedCategoryId).subscribe(p => this.filterLocally(p));
    } else {
      this._productService.getProducts().subscribe(p => this.filterLocally(p));
    }
  }

  fetchProducts() {
    this._productService.getProducts().subscribe(
      response => {
        this.products = response;
      },
      error => {
        console.log(error);
      }
    )
  }

  filterLocally(products: IProduct[]) {
    const { min, max } = this.selectedPriceRange;
    this.products = products.filter(p => p.price >= min && p.price <= max);
  }

  onSearch() {
    this.fetchProducts();
  }

  onCategoryChange() {
    this.fetchProducts();
  }

  onPriceChange() {
    this.fetchProducts();
  }

  updateProduct(productId: number) {
    // Navigate or open modal to update product
    console.log('Update product:', productId);
  }

  deleteProduct(productId: number) {
    if (confirm('Are you sure you want to delete this product?')) {
      this._productService.deleteProduct(productId).subscribe(() => this.fetchProducts());
    }
  }
}
please make necessary changes in above component.ts file so that it satisfies below conditions:
1.by default all the products has to be on home page
2.if i search by productname then that product only has to be displayed.
3.and the products has to filter by category and pricerange also
consider below codes for reference and provide code in that format that maches my requirement

searchProduct(productName: string) {
    if (this.searchByCategoryId == "0") {
      this.filteredProducts = this.products;
    }
    else {
      this.filteredProducts = this.products?.filter(prod => prod.categoryId.toString() == this.searchByCategoryId);
    }
    if (productName != null || productName == "") {
      this.searchByProductName = productName;
      this.filteredProducts = this.filteredProducts?.filter(prod => prod.productName.toLowerCase().indexOf(productName.toLowerCase()) >= 0);
    }
    if (this.filteredProducts?.length == 0) {
      this.showMsgDiv = true;
    }
    else {
      this.showMsgDiv = false;
    }
  }



searchProductByCategory(categoryId: string) {
    if (this.searchByProductName != null || this.searchByProductName == "") {
      this.filteredProducts = this.products?.filter(prod => prod.productName.toLowerCase().indexOf(this.searchByProductName!.toLowerCase()) >= 0);
    }
    else {
      this.filteredProducts = this.products;
    }
    this.searchByCategoryId = categoryId;
    if (this.searchByCategoryId == "0") {
      this.filteredProducts = this.products;
    }
    else {
      this.filteredProducts = this.filteredProducts?.filter(prod => prod.categoryId.toString() == this.searchByCategoryId);
    }
  }
}



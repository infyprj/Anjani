<!-- FILTER SECTION -->
<div class="container my-4">
  <div class="row justify-content-center align-items-center">
    <!-- Category Dropdown -->
    <div class="col-md-3">
      <select class="form-select" [(ngModel)]="selectedCategoryId" (change)="onCategoryChange()">
        <option *ngFor="let category of categories" [value]="category.id">{{ category.name }}</option>
      </select>
    </div>

    <!-- Search Bar -->
    <div class="col-md-6">
      <input type="text"
             [(ngModel)]="searchTerm"
             placeholder="Search products..."
             (input)="onSearch()"
             class="form-control" />
    </div>

    <!-- Price Dropdown -->
    <div class="col-md-3 mt-3 mt-md-0">
      <select class="form-select" [(ngModel)]="selectedPriceRange" (change)="onPriceChange()">
        <option *ngFor="let range of priceRanges" [ngValue]="range">{{ range.label }}</option>
      </select>
    </div>
  </div>
</div>

<!-- NO PRODUCTS MESSAGE -->
<div *ngIf="products.length === 0" class="text-center mt-5">
  <div class="alert alert-warning w-50 mx-auto">
    No products available.
  </div>
</div>

<!-- PRODUCTS LISTING -->
<div class="container mt-4">
  <div class="row">
    <div class="col-md-4 mb-4" *ngFor="let product of filteredProducts">
      <div class="card h-100 shadow-sm">
        <img [src]="product.thumbnailUrl"
             class="card-img-top"
             alt="{{ product.name }}"
             style="height: 250px; object-fit: cover; cursor: pointer;"
             (click)="viewProductDetails(product.productId)" />
        <div class="card-body">
          <h5 class="card-title"
              style="cursor: pointer;"
              (click)="viewProductDetails(product.productId)">
            {{ product.name }}
          </h5>
          <!--<p class="card-text">{{ product.description }}</p>-->
          <p class="fw-bold text-success">₹{{ product.price }}</p>
          <div *ngIf="isAdmin">
            <button class="btn btn-sm btn-primary me-2" (click)="updateProduct(product.productId)">Update</button>
            <button class="btn btn-sm btn-danger" (click)="deleteProduct(product.productId)">Delete</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

___modified

<!-- FILTER SECTION -->
<div class="container my-4">
  <div class="row justify-content-center align-items-center">
    <!-- Category Dropdown -->
    <div class="col-md-3">
      <select class="form-select" [(ngModel)]="selectedCategoryId" (change)="onCategoryChange()">
        <option *ngFor="let category of categories" [value]="category.id">{{ category.name }}</option>
      </select>
    </div>

    <!-- Search Bar -->
    <div class="col-md-6">
      <input type="text"
             [(ngModel)]="searchTerm"
             placeholder="Search products..."
             (input)="onSearch()"
             class="form-control" />
    </div>

    <!-- Price Dropdown -->
    <div class="col-md-3 mt-3 mt-md-0">
      <select class="form-select" [(ngModel)]="selectedPriceRange" (change)="onPriceChange()">
        <option *ngFor="let range of priceRanges" [ngValue]="range">{{ range.label }}</option>
      </select>
    </div>
  </div>
</div>

<!-- NO PRODUCTS MESSAGE -->
<div *ngIf="products.length === 0 || filteredProducts.length === 0" class="text-center mt-5">
  <div class="alert alert-warning w-50 mx-auto">
    No products available.
  </div>
</div>

<!-- PRODUCTS LISTING -->
<div class="container mt-4" *ngIf="products.length > 0 && filteredProducts.length > 0">
  <div class="row">
    <div class="col-md-4 mb-4" *ngFor="let product of filteredProducts">
      <div class="card h-100 shadow-sm">
        <img [src]="product.thumbnailUrl"
             class="card-img-top"
             alt="{{ product.name }}"
             style="height: 250px; object-fit: cover; cursor: pointer;"
             (click)="viewProductDetails(product.productId)" />
        <div class="card-body">
          <h5 class="card-title"
              style="cursor: pointer;"
              (click)="viewProductDetails(product.productId)">
            {{ product.name }}
          </h5>
          <!--<p class="card-text">{{ product.description }}</p>-->
          <p class="fw-bold text-success">₹{{ product.price }}</p>
          <div *ngIf="isAdmin">
            <button class="btn btn-sm btn-primary me-2" (click)="updateProduct(product.productId)">Update</button>
            <button class="btn btn-sm btn-danger" (click)="deleteProduct(product.productId)">Delete</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

---------------------
import { Component, OnInit } from '@angular/core';
import { ProductService } from '../services/product.service';
import { AuthService } from '../services/auth.service';
import { Product } from '../models/product.model';

@Component({
  selector: 'app-saved-products',
  templateUrl: './saved-products.component.html',
  styleUrls: ['./saved-products.component.css']
})
export class SavedProductsComponent implements OnInit {
  savedProducts: Product[] = [];
  isLoading: boolean = false;
  errorMessage: string = '';
  currentUserId: number = 0;

  constructor(
    private productService: ProductService,
    private authService: AuthService
  ) { }

  ngOnInit(): void {
    this.currentUserId = this.authService.getCurrentUserId();
    this.loadSavedProducts();
  }

  loadSavedProducts(): void {
    this.isLoading = true;
    this.productService.getSavedProducts(this.currentUserId).subscribe({
      next: (products) => {
        this.savedProducts = products;
        this.isLoading = false;
      },
      error: (err) => {
        this.errorMessage = 'Failed to load saved products';
        this.isLoading = false;
        console.error(err);
      }
    });
  }

  saveProduct(productId: number): void {
    this.productService.saveProduct(this.currentUserId, productId).subscribe({
      next: (success) => {
        if (success) {
          this.loadSavedProducts(); // Refresh the list
        }
      },
      error: (err) => {
        console.error('Error saving product', err);
      }
    });
  }

  removeSavedProduct(productId: number): void {
    this.productService.removeSavedProduct(this.currentUserId, productId).subscribe({
      next: (success) => {
        if (success) {
          this.savedProducts = this.savedProducts.filter(p => p.productId !== productId);
        }
      },
      error: (err) => {
        console.error('Error removing saved product', err);
      }
    });
  }
}
....
.html
<div class="container mt-4">
  <h2 class="mb-4">Your Saved Products</h2>
  
  <!-- Loading Indicator -->
  <div *ngIf="isLoading" class="text-center">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p>Loading your saved products...</p>
  </div>

  <!-- Error Message -->
  <div *ngIf="errorMessage" class="alert alert-danger">
    {{ errorMessage }}
  </div>

  <!-- No Products Message -->
  <div *ngIf="!isLoading && savedProducts.length === 0" class="text-center mt-5">
    <div class="alert alert-info w-50 mx-auto">
      You haven't saved any products yet.
    </div>
  </div>

  <!-- Products Grid -->
  <div class="row" *ngIf="!isLoading && savedProducts.length > 0">
    <div class="col-md-4 mb-4" *ngFor="let product of savedProducts">
      <div class="card h-100 shadow-sm">
        <img [src]="product.thumbnailUrl" 
             class="card-img-top" 
             alt="{{ product.name }}"
             style="height: 250px; object-fit: cover;">
        <div class="card-body">
          <h5 class="card-title">{{ product.name }}</h5>
          <p class="fw-bold text-success">₹{{ product.price }}</p>
          <button class="btn btn-sm btn-danger" (click)="removeSavedProduct(product.productId)">
            Remove
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
...
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Product } from '../models/product.model';

@Injectable({
  providedIn: 'root'
})
export class ProductService {
  private apiUrl = 'https://your-api-url.com/api/products'; // Replace with your API URL

  constructor(private http: HttpClient) { }

  // Save a product for a user
  saveProduct(userId: number, productId: number): Observable<boolean> {
    return this.http.post<boolean>(`${this.apiUrl}/save`, { userId, productId });
  }

  // Get saved products for a user
  getSavedProducts(userId: number): Observable<Product[]> {
    return this.http.get<Product[]>(`${this.apiUrl}/saved/${userId}`);
  }

  // Remove a saved product
  removeSavedProduct(userId: number, productId: number): Observable<boolean> {
    return this.http.delete<boolean>(`${this.apiUrl}/saved/${userId}/${productId}`);
  }
}
...
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  // This would come from your actual auth implementation
  getCurrentUserId(): number {
    // Return the logged-in user's ID
    // In a real app, this would come from your auth state
    return 1; // Example - replace with actual user ID
  }
}
-------------
get saved products 

import { Component, OnInit } from '@angular/core';
import { ProductService } from '../services/product.service';
import { AuthService } from '../services/auth.service';
import { Router } from '@angular/router';
import { Product } from '../models/product.model';

@Component({
  selector: 'app-saved-products',
  templateUrl: './saved-products.component.html',
  styleUrls: ['./saved-products.component.css']
})
export class SavedProductsComponent implements OnInit {
  savedProducts: Product[] = [];
  isLoading: boolean = false;
  errorMessage: string = '';
  currentUserId: number = 0;

  constructor(
    private productService: ProductService,
    private authService: AuthService,
    private router: Router
  ) { }

  ngOnInit(): void {
    this.currentUserId = this.authService.getCurrentUserId();
    this.loadSavedProducts();
  }

  loadSavedProducts(): void {
    this.isLoading = true;
    this.productService.getSavedProducts(this.currentUserId).subscribe({
      next: (products) => {
        this.savedProducts = products;
        this.isLoading = false;
      },
      error: (err) => {
        this.errorMessage = 'Failed to load saved products';
        this.isLoading = false;
        console.error(err);
      }
    });
  }

  removeFromWishlist(productId: number): void {
    this.productService.removeSavedProduct(this.currentUserId, productId).subscribe({
      next: (success) => {
        if (success) {
          this.savedProducts = this.savedProducts.filter(p => p.productId !== productId);
        }
      },
      error: (err) => {
        console.error('Error removing from wishlist', err);
      }
    });
  }

  addToCart(product: Product): void {
    // Implement your add to cart functionality here
    console.log('Added to cart:', product);
    // this.cartService.addToCart(product);
  }

  viewProductDetails(productId: number): void {
    this.router.navigate(['/product', productId]);
  }
}
...
.html<div class="container my-4">
  <h2 class="mb-4">Your Wishlist</h2>
  
  <!-- Loading Indicator -->
  <div *ngIf="isLoading" class="text-center">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p>Loading your wishlist items...</p>
  </div>

  <!-- Error Message -->
  <div *ngIf="errorMessage" class="alert alert-danger">
    {{ errorMessage }}
  </div>

  <!-- No Products Message -->
  <div *ngIf="!isLoading && savedProducts.length === 0" class="text-center mt-5">
    <div class="alert alert-info w-50 mx-auto">
      Your wishlist is empty. Start saving your favorite products!
    </div>
  </div>

  <!-- Products List -->
  <div class="row">
    <div class="col-md-6 mb-4" *ngFor="let product of savedProducts">
      <div class="card h-100 shadow-sm p-3" style="border-radius: 10px;">
        <div class="row g-0">
          <!-- Product Image -->
          <div class="col-md-4">
            <img 
              [src]="product.thumbnailUrl" 
              class="img-fluid rounded-start" 
              alt="{{ product.name }}"
              style="height: 180px; width: 100%; object-fit: cover; cursor: pointer;"
              (click)="viewProductDetails(product.productId)">
          </div>
          
          <!-- Product Details -->
          <div class="col-md-8">
            <div class="card-body h-100 d-flex flex-column">
              <!-- Product Name -->
              <h5 class="card-title mb-2" style="cursor: pointer;" 
                  (click)="viewProductDetails(product.productId)">
                {{ product.name }}
              </h5>
              
              <!-- Price -->
              <p class="fw-bold text-success mb-3">₹{{ product.price }}</p>
              
              <!-- Buttons -->
              <div class="mt-auto d-flex gap-2">
                <button class="btn btn-primary btn-sm" (click)="addToCart(product)">
                  Add to Cart
                </button>
                <button class="btn btn-outline-danger btn-sm" (click)="removeFromWishlist(product.productId)">
                  Remove
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
...
.css

.card {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0,0,0,0.1);
}

.card-title {
  font-size: 1.1rem;
  color: #333;
}

.btn-sm {
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
}

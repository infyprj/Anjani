https://code-maze.com/angular-password-reset-functionality-with-aspnet-identity/
_____________________________________________________________________________________________

1. Create DTO for Password Reset
In your ASP.NET Core project, define a Data Transfer Object (DTO) to handle the password reset request:

csharp
Copy
Edit
public class ResetPasswordDto
{
    [Required(ErrorMessage = "Password is required")]
    public string Password { get; set; }

    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
    public string ConfirmPassword { get; set; }

    public string Email { get; set; }
    public string Token { get; set; }
}
2. Implement Reset Password Endpoint
In your AccountsController, add an endpoint to handle the password reset:

csharp
Copy
Edit
[HttpPost("ResetPassword")]
public async Task<IActionResult> ResetPassword([FromBody] ResetPasswordDto resetPasswordDto)
{
    if (!ModelState.IsValid)
        return BadRequest(ModelState);

    var user = await _userManager.FindByEmailAsync(resetPasswordDto.Email);
    if (user == null)
        return BadRequest("Invalid request");

    var resetResult = await _userManager.ResetPasswordAsync(user, resetPasswordDto.Token, resetPasswordDto.Password);
    if (!resetResult.Succeeded)
        return BadRequest(resetResult.Errors.Select(e => e.Description));

    return Ok("Password has been reset successfully");
}
3. Generate Password Reset Token and Send Email
To initiate the password reset process, generate a token and send it via email:

csharp
Copy
Edit
public async Task<IActionResult> ForgotPassword([FromBody] ForgotPasswordDto forgotPasswordDto)
{
    var user = await _userManager.FindByEmailAsync(forgotPasswordDto.Email);
    if (user == null)
        return BadRequest("Invalid request");

    var token = await _userManager.GeneratePasswordResetTokenAsync(user);
    var resetLink = Url.Action("ResetPassword", "Account", new { token, email = user.Email }, Request.Scheme);

    // Send email logic here using your email service

    return Ok("Password reset link sent");
}
🖥️ Frontend: Angular
1. Create Reset Password DTO
Define an interface in Angular to match the backend DTO:

typescript
Copy
Edit
export interface ResetPasswordDto {
    password: string;
    confirmPassword: string;
    email: string;
    token: string;
}
2. Generate Reset Password Component
Generate a new component for resetting the password:

bash
Copy
Edit
ng generate component reset-password
3. Implement Reset Password Component
In reset-password.component.ts:

typescript
Copy
Edit
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthenticationService } from '../services/authentication.service';

@Component({
  selector: 'app-reset-password',
  templateUrl: './reset-password.component.html',
  styleUrls: ['./reset-password.component.css']
})
export class ResetPasswordComponent implements OnInit {
  resetPasswordForm: FormGroup;
  token: string;
  email: string;
  successMessage: string;
  errorMessage: string;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private authService: AuthenticationService
  ) {}

  ngOnInit(): void {
    this.token = this.route.snapshot.queryParams['token'];
    this.email = this.route.snapshot.queryParams['email'];

    this.resetPasswordForm = this.fb.group({
      password: ['', [Validators.required]],
      confirmPassword: ['', [Validators.required]]
    });
  }

  onSubmit(): void {
    if (this.resetPasswordForm.invalid) {
      return;
    }

    const { password, confirmPassword } = this.resetPasswordForm.value;
    if (password !== confirmPassword) {
      this.errorMessage = 'Passwords do not match';
      return;
    }

    const resetPasswordDto: ResetPasswordDto = {
      password,
      confirmPassword,
      email: this.email,
      token: this.token
    };

    this.authService.resetPassword(resetPasswordDto).subscribe(
      () => {
        this.successMessage = 'Password reset successfully';
      },
      (error) => {
        this.errorMessage = error.error;
      }
    );
  }
}
4. Create Reset Password Template
In reset-password.component.html:

html
Copy
Edit
<div class="reset-password-container">
  <h2>Reset Your Password</h2>

  <form [formGroup]="resetPasswordForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="password">New Password</label>
      <input id="password" formControlName="password" type="password" class="form-control" />
    </div>

    <div class="form-group">
      <label for="confirmPassword">Confirm Password</label>
      <input id="confirmPassword" formControlName="confirmPassword" type="password" class="form-control" />
    </div>

    <button type="submit" [disabled]="resetPasswordForm.invalid" class="btn btn-primary">Reset Password</button>
  </form>

  <div *ngIf="successMessage" class="alert alert-success">{{ successMessage }}</div>
  <div *ngIf="errorMessage" class="alert alert-danger">{{ errorMessage }}</div>
</div>
5. Implement Authentication Service
In authentication.service.ts, add a method to call the backend API:

typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ResetPasswordDto } from './reset-password.dto';

@Injectable({
  providedIn: 'root'
})
export class AuthenticationService {
  private apiUrl = 'https://yourapiurl/api/accounts';

  constructor(private http: HttpClient) {}

  resetPassword(resetPasswordDto: ResetPasswordDto): Observable<any> {
    return this.http.post(`${this.apiUrl}/resetpassword`, resetPasswordDto);
  }
}
📧 Sending Email with Reset Link
To send the password reset email, you can use an email service like SendGrid, SMTP, or any other provider. Ensure that the email contains a link to the reset password page with the token and email as query parameters:

perl
Copy
Edit
https://yourfrontendurl/reset-password?token=yourToken&email=yourEmail
✅ Final Notes
Ensure that your backend is configured to handle CORS if your frontend and backend are on different domains.

Validate the token's expiration on the backend to enhance security.

Consider implementing additional security measures like CAPTCHA to prevent abuse.

For a more detailed walkthrough, you can refer to this tutorial: Angular Password Reset with ASP.NET Core Identity.

If you need further assistance with specific parts of the implementation, feel free to ask!
